# plugins
set-option -g @plugin    'christoomey/vim-tmux-navigator'
set-option -g @plugin    'tmux-plugins/tmux-resurrect'
set-option -g @plugin    'tmux-plugins/tmux-continuum'
set-option -g @plugin    'jimeh/tmux-themepack'

# theme
set -goq @powerline-color-main-1 colour35
set -goq @powerline-color-main-2 colour114
set -goq @powerline-color-main-3 colour75

set-option -g @themepack 'powerline/block/cyan'
run '~/.tmux/plugins/tpm/tpm'

set -g status-left "#[fg=colour233,bg=colour35,bold] #S #[fg=colour35,bg=colour240,nobold]#[fg=colour233,bg=colour240] #(whoami) #[fg=colour240,bg=colour235]#[fg=colour240,bg=colour235] #I:#P #[fg=colour235,bg=colour233,nobold]"
set -g status-right "#[fg=colour235,bg=colour233]#[fg=colour240,bg=colour235] %H:%M:%S  #[fg=colour240,bg=colour235]#[fg=colour233,bg=colour240] %d-%b-%y "

# global & display
unbind-key           r
unbind-key           C-b
bind-key          -r C-s       send-prefix
bind-key             r         source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
bind-key          -n C-d       send-keys ^d
bind-key             d         detach-client
set-option        -g           prefix    C-s
set-option        -g           base-index 1
set-option        -g           renumber-windows on
set-option        -g           default-terminal "screen-256color"
set-option        -g           status-left-length 50
set-window-option -g           mode-keys vi

# sessions
bind-key      C-b       send-keys 'tat && exit' 'C-m'
bind-key      C-j       split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# windows, panes and sessions
bind-key      N         new-session
bind-key      -         split-window -v -c '#{pane_current_path}'
bind-key      =         split-window -h -c '#{pane_current_path}'
bind-key      c         new-window -c "#{pane_current_path}"
bind-key      b         break-pane -d
bind-key   -n S-Left    resize-pane -L 2
bind-key   -n S-Right   resize-pane -R 2
bind-key   -n S-Down    resize-pane -D 1
bind-key   -n S-Up      resize-pane -U 1 
bind-key   -n C-S-Left  resize-pane -L 10
bind-key   -n C-S-Right resize-pane -R 10
bind-key   -n C-S-Down  resize-pane -D 5
bind-key   -n C-S-Up    resize-pane -U 5
bind-key   -n C-f       resize-pane -Z
unbind-key    z

# navigation & search
unbind-key -n 'C-\'
unbind-key    'C-\'
bind-key   -n 'C-\'      copy-mode
bind-key      'C-\'      copy-mode

# files
bind-key      C-o        split-window -v -l 75% -c '#{pane_current_path}' "git ls-files | fzf --reverse --preview-window right:60% --preview 'bat --style=numbers --color=always {} | head -500' | xargs -oI@ tmux new-window -n vim\\[@\\] vim @" 

# clipboard
unbind-key -T copy-mode-vi Space
unbind-key -T copy-mode-vi Enter
bind-key   -T copy-mode-vi v     send-keys -X begin-selection
bind-key   -T copy-mode-vi y     send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key   -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"

# for search
unbind-key -n C-g
bind-key   -n C-g                                                              split-window -v -p 80 -c "#{pane_current_path}" "source $HOME/workspace/.env/dotfiles/sh_functions && __find_in_files $(pbpaste)"
bind-key   -T copy-mode-vi C-g   send-keys -X copy-pipe-and-cancel "pbcopy" \; split-window -v -p 80 -c "#{pane_current_path}" "source $HOME/workspace/.env/dotfiles/sh_functions && __find_in_files $(pbpaste)"
# quick shortcuts
unbind-key    k
bind-key      k      send-keys "clear" enter

is_pane_sync_on="tmux show-window-options | grep 'synchronize-panes on'"
unbind-key    i 
bind-key      i      if-shell "$is_pane_sync_on" "setw synchronize-panes off; display-message 'synchronize-panes OFF" "setw synchronize-panes on; display-message 'synchronize-panes ON"

# servicenow
unbind-key    M
bind-key      M split-window "$HOME/bin/mle"
unbind-key    S
bind-key      S new-window -d -n "ServiceNow SUDO" "$HOME/bin/snsudo"
unbind-key    H
bind-key      H new-window -n "MLE Inventory (extended)" "$HOME/bin/mle-inventory"
unbind-key    g
bind-key      g new-window -n "GenAI Clusters" "acs genai get-clusters | jq -r '.[].name |= . carthagelab001.ifa' | fzf --reverse --preview 'acs genai describe-cluster --cluster-name {} -otable' --preview-window '95%'"

# azure
unbind-key    A
bind-key      A split-window -v -p 75 -c '#{pane_current_path}' "cat ~/.azure/azureProfile.json | jq -r '.subscriptions[].name' | fzf --header=\"SWITCH TO AZURE SUBSCRIPTION\" --reverse --tac --preview-window=right:81% --preview 'echo SUBSCRIPTION \"{}\"; echo """"; az group list --query \"[]|sort_by(@, &name)\" --subscription {} -otable' | xargs az account set --subscription"

# external
unbind-key    o
bind-key      o   new-window -n "Opening in GitHub..." -d -c "#{pane_current_path}" "source $HOME/.git_functions; github_open_repo_page"
bind-key   -n C-t split-window -v -c "#{pane_current_path}" "git status > /dev/null 2>&1 && tig"
bind-key      W   new-window -n "And now Tom with the weather..." -c "#{pane_current_path}" "curl -s wttr.in && sleep 60"

# navigation
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-Left  if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-Down  if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-Up    if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-Right if-shell "$is_vim" "send-keys C-l" "select-pane -R"

bind-key -T copy-mode-vi C-Left  select-pane -L
bind-key -T copy-mode-vi C-Down  select-pane -D
bind-key -T copy-mode-vi C-Up    select-pane -U
bind-key -T copy-mode-vi C-Right select-pane -R

# servicenow
unbind-key    B
bind-key      B send-keys "pbrun bash\ncd glide"
unbind-key    v 
bind-key      v split-window -p 75 ". $HOME/.sh_aliases && __get_ml_nodes_versions | fzf --reverse --exact --bind \"ctrl-r:reload(. ~/.sh_functions && __get_ml_nodes_versions)\"\n"
unbind-key    u
bind-key      u split-window -h ". $HOME/.sh_aliases && __get_ml_nodes_up | fzf --preview 'mle-status $(echo {} | grep -o \"ml.*service-now.com\")' --reverse --exact --bind \"ctrl-r:reload(. $HOME/.sh_aliases && __get_ml_nodes_up)\"\n"

unbind-key    P
bind-key      P send-keys "echo $(op item get \"ServiceNow OpenLDAP\" --field password)" KPEnter

unbind-key    C-p
bind-key      C-p send-keys "acs genai get-clusters | jq -r '.[].name' | fzf --exact --reverse | xargs -I{} open https://prom.apps.{}.k8s.servicenow.net\n" 

unbind-key    C-s
bind-key      C-s send-keys "git branch | fzf --exact | xargs -I{} git switch {}\n"
