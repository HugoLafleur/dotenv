# !/bin/bash

# aws_functions
# Usage:
#   . aws_functions
#
# Integration:
#   Source via .bash_profile and use aliases as shortcuts
#
# Examples of aliases used as shortcuts:
#   alias ami='aws_ec2_list_owned_images'
#   alias amii='aws_ec2_list_shared_images'
#   alias asg='aws_autoscaling_list_asg'

###################################################
# AutoScaling
aws_autoscaling_list_asg () {
  aws autoscaling describe-auto-scaling-groups \
    --query \
      'AutoScalingGroups[].{
        "AutoScalingGroupName":AutoScalingGroupName,
        "Stack Name":Tags[?Key==`aws:cloudformation:stack-name`]|[0].Value,
        "Instances Ids":join(`" "`, Instances[].InstanceId)
      } | sort_by(@, &AutoScalingGroupName)'
}
aws_autoscaling_list_scaling_activities () {
  aws autoscaling describe-scaling-activities \
    --max-items 30 \
    --query \
      'Activities[].{
        ActivityId:ActivityId,
        WhenLaunched:StartTime,
        WhenUp:EndTime,
        Description:Description
      } | reverse(sort_by(@, &WhenLaunched))' \
    --auto-scaling-group-name "$1"
}
aws_autoscaling_describe_scaling_activity () {
  ACTIVITY_ID="$1"
  if [ -z $ACTIVITY_ID ]; then
    echo "You must specify an ActivityId"
  fi

  aws autoscaling describe-scaling-activities \
      --output json \
      --activity-id $ACTIVITY_ID
}
aws_autoscaling_describe_launch_config () {
  aws autoscaling describe-launch-configurations \
    --output json \
    --launch-configuration-names "$@"
}
###################################################


###################################################
# Cloudformation
aws_cloudformation_list_stacks () {
  if [ -z $AWS_OUTPUT ]; then
    AWS_OUTPUT=table
  fi
  aws cloudformation describe-stacks \
    --output $AWS_OUTPUT \
    --query \
      'sort_by(Stacks, &StackName)[].{
          "Name":StackName,Status:StackStatus,
          "Time Created":CreationTime,
          "Time Updated":LastUpdatedTime
        } | sort_by(@, &"Name")'
}
aws_cloudformation_describe_resources () {
  aws cloudformation describe-stack-resources \
    --query \
      'sort_by(StackResources, &ResourceType)[?ends_with(ResourceType, `ScalingPolicy`) == `false`].{
        "Cloudformation Resource Type":ResourceType,
        PhysicalResourceId:PhysicalResourceId,
        Timestamp:Timestamp
      }' \
    --stack-name "$1"
}
aws_cloudformation_describe_stacks () {
  aws cloudformation describe-stacks \
    --stack-name "$@"
}
aws_cloudformation_describe_stack_parameters () {
  aws cloudformation describe-stacks \
    --stack-name "$1" \
    --query Stacks[].Parameters[]
}
###################################################

###################################################
# EC2
# Instances
aws_ec2_describe_instances () {
  NAME_TAG_FILTER=""
  if [ "$1" != "" ]
  then
    NAME_TAG_FILTER="Name=tag:Name,Values="$1
  fi
  if [ -z $AWS_OUTPUT ]; then
    AWS_OUTPUT=table
  fi
  aws ec2 describe-instances \
    --output $AWS_OUTPUT \
    --query \
      'Reservations[].Instances[].{
        "Stack Name":Tags[?Key==`aws:cloudformation:stack-name`]|[0].Value,
        "Instance ID":InstanceId,
        "Instance Type":InstanceType,
        "Instance PuIP":PublicIpAddress,
        "Instance PrIP":PrivateIpAddress,
        "Key Pair Name":KeyName,
        "Tag (Name)":Tags[?Key==`Name`]|[0].Value}' \
    --filters \
      Name=instance-state-name,Values=running \
      $NAME_TAG_FILTER
}
# Volumes
aws_ec2_describe_volumes () {
  aws ec2 describe-volumes \
    --query \
      'Volumes[].{
        CreateTime:CreateTime,
        Iops:Iops,
        VolumeId:VolumeId,
        VolumeType:VolumeType,
        State:State,
        AttachedTo:Attachments[].InstanceId,
        DeleteOnTermination:Attachments[].DeleteOnTermination
      }|sort_by(@, &CreateTime)'
}

# Security Groups
aws_ec2_list_security_groups () {
  aws ec2 describe-security-groups \
    --query \
      'SecurityGroups[].
      [
        GroupId,
        GroupName,
        Tags[?Key==`Name`]|[0].Value
      ]'
}
aws_ec2_show_security_groups () {
  aws ec2 describe-security-groups \
    --query \
      'SecurityGroups[].IpPermissions[].
      [
        IpProtocol,
        FromPort,
        ToPort,
        join(`; `, IpRanges[].CidrIp)
      ]' \
    --group-ids "$@"
}

# AMIs
aws_ec2_list_owned_images () {
  aws ec2 describe-images \
    --owners self \
    --query \
      'Images[].
      {
        "_created":CreationDate,
        Account:OwnerId,
        ImageId:ImageId,
        ImageName:Name,
        VirtualizationType:VirtualizationType,
        RootDeviceType:RootDeviceType,
        KeyState:State
      }|sort_by(@, &"_created")'
}
aws_ec2_list_shared_images () {
  aws ec2 describe-images \
    --executable-users self \
    --query \
    'Images[].
    {
      "_created":CreationDate,
        Account:OwnerId,
      ImageId:ImageId,
      ImageName:Name,
      VirtualizationType:VirtualizationType,
      RootDeviceType:RootDeviceType,
      State:State
    }|sort_by(@, &"_created")'
}

# ELBs
aws_ec2_describe_load_balancers () {
  if [ -z $AWS_OUTPUT ]; then
    AWS_OUTPUT=table
  fi
  aws elb --output $AWS_OUTPUT describe-load-balancers "$@"
}

# Add my public ip to a security group
aws_ec2_add_publicip_to_sg () {
  aws ec2 authorize-security-group-ingress \
    --group-id "$1" \
    --ip-permissions \
      "FromPort=22,
       ToPort=22,
       IpProtocol=TCP,
       IpRanges=[
         {CidrIp=`curl -s ipinfo.io/ip`/32,Description=Home}]"
  aws ec2 authorize-security-group-ingress \
    --group-id "$1" \
    --ip-permissions \
      "FromPort=443,
       ToPort=443,
       IpProtocol=TCP,
       IpRanges=[
         {CidrIp=`curl -s ipinfo.io/ip`/32,Description=Home}]"
  aws ec2 authorize-security-group-ingress \
    --group-id "$1" \
    --ip-permissions \
      "FromPort=80,
       ToPort=80,
       IpProtocol=TCP,
       IpRanges=[
         {CidrIp=`curl -s ipinfo.io/ip`/32,Description=Home}]"



}

###################################################

###################################################
# RDS
aws_rds_list_instances () {
  aws rds describe-db-instances \
    --query \
      'DBInstances[].
      {
        "DBInstanceIdentifier":DBInstanceIdentifier,
        "Engine-Version":join(`-`, [Engine,EngineVersion]),
        "Instance Class":DBInstanceClass,
        "Service Group":Tags[?Key==`octave:ca:servicegroup`]|[0].Value,
        "Service Name":Tags[?Key==`octave:ca:servicename`]|[0].Value
      }'
}
###################################################

###################################################
# Route 53
aws_r53_list_hosted_zones () {
  aws route53 list-hosted-zones \
    --query \
      'HostedZones[].
      {
        "ID":Id, Name:Name,
        "Number of Record Sets":ResourceRecordSetCount,
        "Other Notes":Config.Comment
      }'
}
aws_r53_list_record_sets () {
  aws route53 list-resource-record-sets \
    --query \
      'ResourceRecordSets[?ResourceRecords!=`null`].
      {
        Name:Name,
        Type:Type,
        TTL:TTL,
        Records:join(`"  "`, ResourceRecords[].Value)
      } | sort_by(@, &Name)' \
    --hosted-zone-id "$1"
}

###################################################

###################################################
# S3
aws_s3_get_bucket_policy () {
  aws s3api get-bucket-policy \
    --bucket "$1" \
    --output json | jq -r '.Policy' |jq
}

###################################################
# Tagging
aws_get_cost_allocation_tagged_resources () {
  if  [ "$1" != "" ]; then
    aws resourcegroupstaggingapi get-resources \
    --output text \
    --resource-type-filters "$1" \
    --query '
      ResourceTagMappingList[].{
        id:ResourceARN,
        ServiceGroup:Tags[?Key==`octave:ca:servicegroup`]|[0].Value,
        ServiceName:Tags[?Key==`octave:ca:servicename`]|[0].Value}
      ' | column -t | sort -k2 | sort -k1
  else
    aws resourcegroupstaggingapi get-resources \
    --output text \
    --query '
      ResourceTagMappingList[].{
        id:ResourceARN,
        ServiceGroup:Tags[?Key==`octave:ca:servicegroup`]|[0].Value,
        ServiceName:Tags[?Key==`octave:ca:servicename`]|[0].Value}
      ' | column -t | sort -k2 | sort -k1
  fi
}

aws_get_cost_allocation_resource_tags () {
  aws resourcegroupstaggingapi get-resources \
  --output text \
  --query '
    ResourceTagMappingList[].{
      ServiceGroup:Tags[?Key==`octave:ca:servicegroup`]|[0].Value,
      ServiceName:Tags[?Key==`octave:ca:servicename`]|[0].Value}
    ' | column -t | sort -k2 | sort -k1 | uniq
}

###################################################
aws_get_account_id () {
  aws sts get-caller-identity \
    --query 'Account' \
    --output text
}

###################################################
